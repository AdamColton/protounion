// Code generated by protoc-gen-go.
// source: union.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	union.proto

It has these top-level messages:
	TypeHeader
	Foo
	Bar
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_FOO Type = 0
	Type_BAR Type = 1
)

var Type_name = map[int32]string{
	0: "FOO",
	1: "BAR",
}
var Type_value = map[string]int32{
	"FOO": 0,
	"BAR": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TypeHeader struct {
	Type Type `protobuf:"varint,1,opt,name=type,enum=main.Type" json:"type,omitempty"`
}

func (m *TypeHeader) Reset()                    { *m = TypeHeader{} }
func (m *TypeHeader) String() string            { return proto.CompactTextString(m) }
func (*TypeHeader) ProtoMessage()               {}
func (*TypeHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TypeHeader) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_FOO
}

type Foo struct {
	Type Type   `protobuf:"varint,1,opt,name=type,enum=main.Type" json:"type,omitempty"`
	Foo  string `protobuf:"bytes,2,opt,name=foo" json:"foo,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (m *Foo) String() string            { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Foo) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_FOO
}

func (m *Foo) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

type Bar struct {
	Type Type   `protobuf:"varint,1,opt,name=type,enum=main.Type" json:"type,omitempty"`
	Bar  uint32 `protobuf:"varint,2,opt,name=bar" json:"bar,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (m *Bar) String() string            { return proto.CompactTextString(m) }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Bar) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_FOO
}

func (m *Bar) GetBar() uint32 {
	if m != nil {
		return m.Bar
	}
	return 0
}

func init() {
	proto.RegisterType((*TypeHeader)(nil), "main.TypeHeader")
	proto.RegisterType((*Foo)(nil), "main.Foo")
	proto.RegisterType((*Bar)(nil), "main.Bar")
	proto.RegisterEnum("main.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("union.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xcd, 0xcb, 0xcc,
	0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0xd2, 0xe1,
	0xe2, 0x0a, 0xa9, 0x2c, 0x48, 0xf5, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0x12, 0x92, 0xe3, 0x62, 0x29,
	0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0xe2, 0xd2, 0x03, 0x29, 0xd1, 0x03,
	0xc9, 0x07, 0x81, 0xc5, 0x95, 0xcc, 0xb9, 0x98, 0xdd, 0xf2, 0xf3, 0x09, 0x29, 0x13, 0x12, 0xe0,
	0x62, 0x4e, 0xcb, 0xcf, 0x97, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x41, 0x1a, 0x9d,
	0x12, 0x8b, 0x88, 0xd1, 0x98, 0x94, 0x58, 0x04, 0xd6, 0xc8, 0x1b, 0x04, 0x62, 0x6a, 0x49, 0x70,
	0xb1, 0x80, 0xe4, 0x85, 0xd8, 0xb9, 0x98, 0xdd, 0xfc, 0xfd, 0x05, 0x18, 0x40, 0x0c, 0x27, 0xc7,
	0x20, 0x01, 0xc6, 0x24, 0x36, 0xb0, 0x37, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xfb,
	0x91, 0x94, 0xd5, 0x00, 0x00, 0x00,
}
